function [aPv, aE, aW, aN, aS, b] = get_v_coeffs(nx,ny,u,v,dxc,dxe,dyc,dye,g,Ra,T,Thot,dt)
dx=1/(nx-1);
dy=1/(ny-1);
%dt=0.00001;

Fw = zeros(size(v)); Fe = zeros(size(v)); Fn = zeros(size(v)); Fs = zeros(size(v));
Dw = zeros(size(v)); De = zeros(size(v)); Dn = zeros(size(v)); Ds = zeros(size(v));
zo = zeros(size(v)); Sp = zeros(size(v)); Sv = zeros(size(v)); b  = zeros(size(v));
T_hot=ones(size(T))*Thot;

% geometric quantities
cellvol = (dxc.*dye');
celldy = ones(size(dxc)).*dye';
celldx = dxc.*ones(size(dye'));

% source terms
%b(:,2:ny) = Sv(:,2:ny).*cellvol + (p(:,1:ny-1) - p(:,2:ny)).*celldx;

% convective and diffusive fluxes
Fw(:,2:ny) = 0.5*(u(1:nx,2:ny  ) + u(1:nx  ,1:ny-1)) .*celldy;   Dw(2:nx,2:ny) = repmat(dxe , 1, ny-1) .* celldy(2:nx,:);
Fe(:,2:ny) = 0.5*(u(2:nx+1,2:ny) + u(2:nx+1,1:ny-1)) .*celldy;   De(1:nx-1,2:ny) = repmat(dxe , 1, ny-1) .* celldy(1:nx-1,:);
Fs(:,2:ny) = 0.5*(v(:,1:ny-1   ) + v(:     ,2:ny  )) .*celldx;   Ds(:,2:ny) = repmat(dyc(1:ny-1)', nx, 1) .* celldx;
Fn(:,2:ny) = 0.5*(v(:,3:ny+1   ) + v(:     ,2:ny  )) .*celldx;   Dn(:,2:ny) = repmat(dyc(2:ny)'  , nx, 1) .* celldx;

% calculate coefficient values --BCs handled through ghost points
advec_scheme = 1;
if(advec_scheme==1) % upwind scheme
  aE = De + max(zo, -Fe);  aN = Dn + max(zo, -Fn);  
  aW = Dw + max(Fw,  zo);  aS = Ds + max(Fs,  zo);  
elseif(advec_scheme==2) % C-D scheme
  aE = De - 0.5*Fe;  aN = Dn - 0.5*Fn;  
  aW = Dw + 0.5*Fw;  aS = Ds + 0.5*Fs;  
elseif(advec_scheme==3) % PowerLaw scheme
  aE = De .* max(0, (1-0.1*abs(Fe./De)).^5) + max(0, -Fe);
  aW = Dw .* max(0, (1-0.1*abs(Fw./Dw)).^5) + max(0,  Fw);
  aN = Dn .* max(0, (1-0.1*abs(Fn./Dn)).^5) + max(0, -Fn);
  aS = Ds .* max(0, (1-0.1*abs(Fs./Ds)).^5) + max(0, -Fs);
end

% overwrite appropriate coefficients to zero for BCs
aW(1,:)  = 0; Fw(1,:)  = 0;   % west boundary
aE(nx,:) = 0; Fe(nx,:) = 0;   % east boundary

% calculate aP
aPv = -(aE + aW + aS + aN) - ((Fe-Fw)+(Fn-Fs));
%aPv=aPv+(dx*dy/dt)*ones(nx,ny-1);
aPv(:,2:ny) = aPv(:,2:ny) - Sp(:,2:ny).*cellvol;

for i=2:nx-1
      for j=2:ny-1
b(i,j)=-(Ra*(T(i,j))*(dx*dy);
      end
end

%% print interior points
%for i=2:nx-1
% for j=2:ny
%   [i j aE(i,j) aW(i,j) aN(i,j) aS(i,j) aP(i,j) b(i,j) Fw(i,j) Dw(i,j)]
% end
%end
%
%% print bottom boundary points
%for i=1
% for j=2:ny
%   [i j aE(i,j) aW(i,j) aN(i,j) aS(i,j) aP(i,j) b(i,j)]
% end
%end
%
%% print top boundary points
%for i=nx
% for j=2:ny
%   [i j aE(i,j) aW(i,j) aN(i,j) aS(i,j) aP(i,j) b(i,j)]
% end
%end


end
